name: PHP Unit Tests

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ master ]

permissions:
  contents: read
  issues: write
  pull-requests: write
  checks: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup PHP 8.1
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: cli, common, curl, mbstring, xml, zip
        tools: composer:v2
        coverage: xdebug
        ini-values: memory_limit=2G
    
    - name: Validate composer files
      run: composer validate --strict
    
    - name: Get Composer Cache Directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
    
    - name: Cache Composer dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-
    
    - name: Install dependencies
      run: composer install --no-interaction --no-ansi --prefer-dist --optimize-autoloader
    
    - name: Create test outputs directory
      run: mkdir -p test_outputs/coverage
    
    - name: Check PHP syntax
      run: find . -name "*.php" -not -path "./vendor/*" -exec php -l {} \;
    
    # Run PHP CodeSniffer and create annotations
    - name: Run PHP CodeSniffer
      id: phpcs
      run: |
        if [ -f vendor/bin/phpcs ]; then
          # Create both human-readable and structured output
          vendor/bin/phpcs src/ tests/ > test_outputs/phpcs-output.txt 2>&1 || PHPCS_EXIT_CODE=$?
          vendor/bin/phpcs --report=json --report-file=test_outputs/phpcs.json src/ tests/ || true
          
          # Count errors and warnings from JSON
          if [ -f test_outputs/phpcs.json ]; then
            ERRORS=$(php -r "
              \$json = json_decode(file_get_contents('test_outputs/phpcs.json'), true);
              echo isset(\$json['totals']['errors']) ? \$json['totals']['errors'] : 0;
            ")
            WARNINGS=$(php -r "
              \$json = json_decode(file_get_contents('test_outputs/phpcs.json'), true);
              echo isset(\$json['totals']['warnings']) ? \$json['totals']['warnings'] : 0;
            ")
            echo "errors=${ERRORS}" >> $GITHUB_OUTPUT
            echo "warnings=${WARNINGS}" >> $GITHUB_OUTPUT
          else
            echo "errors=0" >> $GITHUB_OUTPUT
            echo "warnings=0" >> $GITHUB_OUTPUT
          fi
          
          # Show results
          if [ -f test_outputs/phpcs-output.txt ]; then
            echo "PHPCS Output:"
            cat test_outputs/phpcs-output.txt
          fi
        else
          echo "PHP CodeSniffer not found. Skipping."
          echo "errors=0" >> $GITHUB_OUTPUT
          echo "warnings=0" >> $GITHUB_OUTPUT
        fi
      continue-on-error: true
    
    # Run PHPStan with better output
    - name: Run PHPStan
      id: phpstan
      run: |
        if [ -f vendor/bin/phpstan ]; then
          if [ -f phpstan.neon ] || [ -f phpstan.neon.dist ]; then
            vendor/bin/phpstan analyse --memory-limit=2G > test_outputs/phpstan-output.txt 2>&1
            PHPSTAN_EXIT_CODE=$?
          else
            vendor/bin/phpstan analyse src/ tests/ --level=5 --memory-limit=2G > test_outputs/phpstan-output.txt 2>&1
            PHPSTAN_EXIT_CODE=$?
          fi
          
          # Set status based on exit code
          if [ $PHPSTAN_EXIT_CODE -eq 0 ]; then
            echo "status=‚úÖ No errors found" >> $GITHUB_OUTPUT
          else
            echo "status=‚ùå Errors found" >> $GITHUB_OUTPUT
          fi
          
          # Show results
          echo "PHPStan Output:"
          cat test_outputs/phpstan-output.txt
        else
          echo "PHPStan not found. Skipping."
          echo "status=‚ö†Ô∏è Not run" >> $GITHUB_OUTPUT
        fi
      continue-on-error: true
    
    # Run PHPUnit tests and capture results
    - name: Run PHPUnit tests
      id: phpunit
      run: |
        if [ -f vendor/bin/phpunit ]; then
          # Run tests and capture exit code
          XDEBUG_MODE=coverage vendor/bin/phpunit \
            --coverage-clover test_outputs/coverage/clover.xml \
            --coverage-cobertura test_outputs/coverage/cobertura.xml \
            --coverage-html test_outputs/coverage/html \
            --log-junit test_outputs/phpunit.xml \
            --testdox-xml test_outputs/testdox.xml \
            > test_outputs/phpunit_output.txt 2>&1
          PHPUNIT_EXIT_CODE=$?
          
          echo "PHPUnit Exit Code: $PHPUNIT_EXIT_CODE"
          echo "exit_code=$PHPUNIT_EXIT_CODE" >> $GITHUB_OUTPUT
          
          # Show PHPUnit output
          echo "PHPUnit Output:"
          cat test_outputs/phpunit_output.txt
          
          # Parse results from output
          if [ -f test_outputs/phpunit_output.txt ]; then
            # Extract test summary line
            TESTS_LINE=$(grep -E "Tests: [0-9]+" test_outputs/phpunit_output.txt | tail -1 || echo "")
            echo "tests_summary=$TESTS_LINE" >> $GITHUB_OUTPUT
            
            # Extract individual counts for better reporting
            if [ -n "$TESTS_LINE" ]; then
              TOTAL_TESTS=$(echo "$TESTS_LINE" | grep -oE "Tests: [0-9]+" | grep -oE "[0-9]+")
              ASSERTIONS=$(echo "$TESTS_LINE" | grep -oE "Assertions: [0-9]+" | grep -oE "[0-9]+")
              echo "total_tests=${TOTAL_TESTS:-0}" >> $GITHUB_OUTPUT
              echo "total_assertions=${ASSERTIONS:-0}" >> $GITHUB_OUTPUT
            fi
            
            # Determine status based on exit code and output
            if [ $PHPUNIT_EXIT_CODE -eq 0 ]; then
              if grep -q "OK" test_outputs/phpunit_output.txt; then
                echo "status=‚úÖ All tests passed!" >> $GITHUB_OUTPUT
              else
                echo "status=‚úÖ Tests completed successfully" >> $GITHUB_OUTPUT
              fi
            else
              echo "status=‚ùå Tests failed" >> $GITHUB_OUTPUT
            fi
          else
            echo "tests_summary=No test output found" >> $GITHUB_OUTPUT
            echo "status=‚ö†Ô∏è No test results" >> $GITHUB_OUTPUT
          fi
        else
          echo "PHPUnit not found. Skipping."
          echo "exit_code=1" >> $GITHUB_OUTPUT
          echo "status=‚ö†Ô∏è PHPUnit not found" >> $GITHUB_OUTPUT
          echo "tests_summary=PHPUnit not available" >> $GITHUB_OUTPUT
        fi
    
    # Generate coverage report
    - name: Code Coverage Report
      id: coverage
      uses: irongut/CodeCoverageSummary@v1.3.0
      if: always()
      with:
        filename: test_outputs/coverage/cobertura.xml
        badge: true
        fail_below_min: false
        format: markdown
        hide_branch_rate: false
        hide_complexity: true
        indicators: true
        output: both
        thresholds: '60 80'
    
    # Validate and debug JUnit XML structure
    - name: Debug and validate JUnit XML
      if: always()
      run: |
        if [ -f test_outputs/phpunit.xml ]; then
          echo "=== JUnit XML file exists ==="
          ls -la test_outputs/phpunit.xml
          echo ""
          echo "=== File structure (first 100 lines) ==="
          head -100 test_outputs/phpunit.xml
          echo ""
          echo "=== Validation ==="
          # Check if XML is well-formed
          if command -v xmllint &> /dev/null; then
            if xmllint --noout test_outputs/phpunit.xml 2>/dev/null; then
              echo "‚úÖ XML is well-formed"
              # Count test cases
              TESTCASE_COUNT=$(xmllint --xpath "count(//testcase)" test_outputs/phpunit.xml 2>/dev/null || echo "0")
              echo "Found $TESTCASE_COUNT test cases in XML"
            else
              echo "‚ùå XML validation failed"
              xmllint --noout test_outputs/phpunit.xml || true
            fi
          else
            echo "xmllint not available, skipping XML validation"
            # Alternative count using grep
            TESTCASE_COUNT=$(grep -c "<testcase" test_outputs/phpunit.xml || echo "0")
            echo "Found $TESTCASE_COUNT test cases in XML (via grep)"
          fi
        else
          echo "‚ùå No JUnit XML file found"
        fi
    
    # Use test reporter with better error handling
    - name: Publish Test Results
      id: test-reporter
      uses: dorny/test-reporter@v1
      if: always() && hashFiles('test_outputs/phpunit.xml') != ''
      with:
        name: PHPUnit Tests
        path: test_outputs/phpunit.xml
        reporter: java-junit
        fail-on-error: false
        fail-on-empty: false
        max-annotations: 50
        list-suites: all
        list-tests: all
    
    # Comment PR with comprehensive results
    - name: Add comprehensive test summary to PR
      if: github.event_name == 'pull_request'
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        recreate: true
        message: |
          ## üß™ Test Results Summary
          
          ### PHPUnit Tests
          ${{ steps.phpunit.outputs.status }}
          
          **Details:** ${{ steps.phpunit.outputs.tests_summary || 'Test summary not available' }}
          
          ${{ steps.phpunit.outputs.total_tests && format('- **Total Tests:** {0}', steps.phpunit.outputs.total_tests) || '' }}
          ${{ steps.phpunit.outputs.total_assertions && format('- **Total Assertions:** {0}', steps.phpunit.outputs.total_assertions) || '' }}
          
          ### Code Quality
          - **PHPCS:** ${{ steps.phpcs.outputs.errors == '0' && steps.phpcs.outputs.warnings == '0' && '‚úÖ' || '‚ö†Ô∏è' }} ${{ steps.phpcs.outputs.errors || '0' }} errors, ${{ steps.phpcs.outputs.warnings || '0' }} warnings
          - **PHPStan:** ${{ steps.phpstan.outputs.status }}
          
          ### üìÅ Detailed Reports
          - **Coverage Report:** Download the `test-outputs` artifact for detailed HTML coverage report
          - **Test Results:** Check the "Tests" tab above for detailed test results
          - **Raw Logs:** View the "Actions" tab for complete output logs
          
          ---
          <sub>This comment will update automatically when you push new commits.</sub>
    
    # Add coverage details from the generated markdown file
    - name: Add coverage report to PR comment
      if: github.event_name == 'pull_request' && hashFiles('code-coverage-results.md') != ''
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        append: true
        message: |
          
          ### Code Coverage
          
    
    - name: Append coverage file to PR comment
      if: github.event_name == 'pull_request' && hashFiles('code-coverage-results.md') != ''
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        append: true
        path: code-coverage-results.md
    
    # Upload detailed test artifacts
    - name: Upload test outputs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-outputs
        path: test_outputs/
        retention-days: 7
    
    # Upload coverage to Codecov
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: always()
      with:
        files: ./test_outputs/coverage/clover.xml,./test_outputs/coverage/cobertura.xml
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false
