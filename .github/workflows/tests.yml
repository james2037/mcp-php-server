name: PHP Unit Tests

# Trigger the workflow on push to any branch and pull requests
on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Setup PHP with extensions and Xdebug (matches your VM setup)
    - name: Setup PHP 8.1
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: cli, common, curl, mbstring, xml, zip
        tools: composer:v2
        coverage: xdebug
        ini-values: memory_limit=2G
    
    # Validate composer.json and composer.lock
    - name: Validate composer files
      run: composer validate --strict
    
    # Get Composer cache directory for caching
    - name: Get Composer Cache Directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
    
    # Cache Composer dependencies
    - name: Cache Composer dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-
    
    # Install dependencies (matches your script)
    - name: Install dependencies
      run: composer install --no-interaction --no-ansi --prefer-dist --optimize-autoloader
    
    # Create test outputs directory
    - name: Create test outputs directory
      run: mkdir -p test_outputs/coverage
    
    # Run PHP syntax check
    - name: Check PHP syntax
      run: find . -name "*.php" -not -path "./vendor/*" -exec php -l {} \;
    
    # Run PHP CodeSniffer (matches your test script)
    - name: Run PHP CodeSniffer
      run: |
        if [ -f vendor/bin/phpcs ]; then
          vendor/bin/phpcs -s src/ tests/ > test_outputs/phpcs_output.txt 2>&1
          echo "PHPCS Output:"
          cat test_outputs/phpcs_output.txt
        else
          echo "PHP CodeSniffer not found. Skipping."
        fi
      continue-on-error: true
    
    # Run PHPStan (matches your test script)
    - name: Run PHPStan
      run: |
        if [ -f vendor/bin/phpstan ]; then
          if [ -f phpstan.neon ] || [ -f phpstan.neon.dist ]; then
            vendor/bin/phpstan analyse --memory-limit=2G > test_outputs/phpstan_output.txt 2>&1
          else
            vendor/bin/phpstan analyse src/ tests/ --level=5 --memory-limit=2G > test_outputs/phpstan_output.txt 2>&1
          fi
          echo "PHPStan Output:"
          cat test_outputs/phpstan_output.txt
        else
          echo "PHPStan not found. Skipping."
        fi
      continue-on-error: true
    
    # Run PHPUnit tests (matches your test script and phpunit.xml)
    - name: Run PHPUnit tests
      run: |
        if [ -f vendor/bin/phpunit ]; then
          XDEBUG_MODE=coverage vendor/bin/phpunit --coverage-clover test_outputs/coverage/clover.xml --coverage-html test_outputs/coverage/html --coverage-text > test_outputs/phpunit_output.txt 2>&1
          echo "PHPUnit Output:"
          cat test_outputs/phpunit_output.txt
        else
          echo "PHPUnit not found. Skipping."
        fi
    
    # Parse test results and coverage for PR comment
    - name: Parse test results
      if: github.event_name == 'pull_request'
      id: test-results
      run: |
        # Extract test summary
        if [ -f test_outputs/phpunit_output.txt ]; then
          TESTS_LINE=$(grep -E "Tests: [0-9]+" test_outputs/phpunit_output.txt | tail -1 || echo "Tests: Unable to parse")
          echo "tests_summary=$TESTS_LINE" >> $GITHUB_OUTPUT
          
          # Check if tests passed
          if grep -q "OK (" test_outputs/phpunit_output.txt; then
            echo "tests_status=✅ All tests passed!" >> $GITHUB_OUTPUT
          elif grep -q "FAILURES!" test_outputs/phpunit_output.txt || grep -q "ERRORS!" test_outputs/phpunit_output.txt; then
            echo "tests_status=❌ Some tests failed" >> $GITHUB_OUTPUT
          else
            echo "tests_status=⚠️ Unable to determine test status" >> $GITHUB_OUTPUT
          fi
        else
          echo "tests_summary=No test output found" >> $GITHUB_OUTPUT
          echo "tests_status=⚠️ No test results" >> $GITHUB_OUTPUT
        fi
        
        # Extract coverage percentage from clover.xml
        if [ -f test_outputs/coverage/clover.xml ]; then
          COVERAGE=$(php -r "
            \$xml = simplexml_load_file('test_outputs/coverage/clover.xml');
            \$metrics = \$xml->project->metrics;
            \$statements = (int)\$metrics['statements'];
            \$coveredstatements = (int)\$metrics['coveredstatements'];
            if (\$statements > 0) {
              echo round((\$coveredstatements / \$statements) * 100, 2);
            } else {
              echo '0';
            }
          ")
          echo "coverage_percentage=$COVERAGE%" >> $GITHUB_OUTPUT
        else
          echo "coverage_percentage=Unable to calculate" >> $GITHUB_OUTPUT
        fi
        
        # Extract PHPCS issues count
        if [ -f test_outputs/phpcs_output.txt ]; then
          PHPCS_ERRORS=$(grep -c "ERROR" test_outputs/phpcs_output.txt || echo "0")
          PHPCS_WARNINGS=$(grep -c "WARNING" test_outputs/phpcs_output.txt || echo "0")
          echo "phpcs_errors=$PHPCS_ERRORS" >> $GITHUB_OUTPUT
          echo "phpcs_warnings=$PHPCS_WARNINGS" >> $GITHUB_OUTPUT
        else
          echo "phpcs_errors=0" >> $GITHUB_OUTPUT
          echo "phpcs_warnings=0" >> $GITHUB_OUTPUT
        fi
        
        # Extract PHPStan issues
        if [ -f test_outputs/phpstan_output.txt ]; then
          if grep -q "No errors found" test_outputs/phpstan_output.txt; then
            echo "phpstan_status=✅ No errors found" >> $GITHUB_OUTPUT
          else
            PHPSTAN_ERRORS=$(grep -oE "[0-9]+ error" test_outputs/phpstan_output.txt | head -1 | grep -oE "[0-9]+" || echo "unknown")
            echo "phpstan_status=❌ $PHPSTAN_ERRORS errors found" >> $GITHUB_OUTPUT
          fi
        else
          echo "phpstan_status=⚠️ Not run" >> $GITHUB_OUTPUT
        fi
    
    # Comment on PR with test results
    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const testStatus = '${{ steps.test-results.outputs.tests_status }}';
          const testsSummary = '${{ steps.test-results.outputs.tests_summary }}';
          const coverage = '${{ steps.test-results.outputs.coverage_percentage }}';
          const phpcsErrors = '${{ steps.test-results.outputs.phpcs_errors }}';
          const phpcsWarnings = '${{ steps.test-results.outputs.phpcs_warnings }}';
          const phpstanStatus = '${{ steps.test-results.outputs.phpstan_status }}';
          
          const coverageEmoji = parseFloat(coverage) >= 80 ? '✅' : parseFloat(coverage) >= 60 ? '⚠️' : '❌';
          const phpcsEmoji = phpcsErrors == '0' && phpcsWarnings == '0' ? '✅' : '⚠️';
          
          const body = `## 🧪 Test Results
          
          ${testStatus}
          
          **📊 Summary:**
          - **Tests:** ${testsSummary}
          - **Coverage:** ${coverageEmoji} ${coverage}
          - **PHPCS:** ${phpcsEmoji} ${phpcsErrors} errors, ${phpcsWarnings} warnings
          - **PHPStan:** ${phpstanStatus}
          
          <details>
          <summary>📁 Download detailed reports</summary>
          
          - [Download test artifacts](${context.payload.pull_request.html_url}/checks) for detailed coverage HTML report
          - View the "Actions" tab for full test output logs
          </details>`;
          
          // Find existing comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.data.find(comment => 
            comment.user.login === 'github-actions[bot]' && 
            comment.body.includes('🧪 Test Results')
          );
          
          if (existingComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: body
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }
    
    # Upload test results and coverage
    - name: Upload test outputs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-outputs
        path: test_outputs/
        retention-days: 7
    
    # Upload test coverage
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./test_outputs/coverage/clover.xml
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false
